{"version":3,"sources":["components/common/FormsControl/FormsControl.js","utils/validators.js","components/Login/Login.js"],"names":["FormControl","meta","touched","error","children","hasError","className","Textarea","props","input","Input","CreateField","placeholder","name","validators","component","type","text","validate","required","value","maxLengthCreator","maxLength","length","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","Login","dispatch","useDispatch","useSelector","state","auth","isAuth","to","formData","email","password","rememberMe","login"],"mappings":"6PAMaA,EAAc,SAAC,GAA4C,IAAD,IAAzCC,KAAQC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,MAASC,EAAe,EAAfA,SAEhDC,EAAWH,GAAWC,EAE5B,OACE,sBAAKG,UAAS,uBAAkBD,GAAY,SAA5C,UACE,8BACGD,IAGH,8BAEIC,GACA,+BACGF,UAQAI,EAAW,SAACC,GAEvB,OAAO,cAACR,EAAD,2BAAiBQ,GAAjB,aACL,oDAAcA,EAAMC,OAAWD,QAItBE,EAAQ,SAACF,GAEpB,OAAO,cAACR,EAAD,2BAAiBQ,GAAjB,aACL,iDAAWA,EAAMC,OAAWD,QAInBG,EAAc,SAACC,EAAaC,EAAMC,EAAYC,GAAqC,IAA1BC,EAAyB,uDAAlB,GAAIC,EAAc,uDAAP,GACtF,OACE,gCACE,cAAC,IAAD,CACEJ,KAAMA,EACNE,UAAWA,EACXH,YAAaA,EACbM,SAAUJ,EACVE,KAAMA,IAEPC,O,uDCpDP,oEAAO,IAAME,EAAW,SAACC,GACvB,IAAIA,EAEJ,MAAO,sBAGIC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC9C,IAAS,OAALA,QAAK,IAALA,OAAA,EAAAA,EAAOG,QAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,uDCPjC,kFAYMA,EAAYD,YAAiB,IAkC7BG,EAAiBC,YAAU,CAC/BC,KAAM,SADeD,EAhCL,SAAC,GAA6B,IAA3BE,EAA0B,EAA1BA,aAAcxB,EAAY,EAAZA,MAEjC,OACE,uBAAMyB,SAAUD,EAAhB,UAEIhB,YAAY,QAAS,QAAS,CAACQ,IAAUG,GAAYZ,IAAO,SAI5DC,YAAY,WAAY,WAAY,CAACQ,IAAUG,GAAYZ,IAAO,YAIlEC,YAAY,KAAM,aAAc,GAAID,IAAO,WAAY,eAIvDP,GACA,qBAAKG,UAAU,cAAf,SACGH,IAIL,8BACE,mDAsCO0B,UA1BD,WACZ,IAAMC,EAAWC,cAQjB,OAPeC,aAAY,SAACC,GAAD,OAAWA,EAAMC,KAAKC,UAQxC,cAAC,IAAD,CAAUC,GAAI,aAIrB,gCACE,uCAIA,cAACZ,EAAD,CACEI,SAhBW,SAACS,GAChB,IAAMC,EAAgCD,EAAhCC,MAAOC,EAAyBF,EAAzBE,SAAUC,EAAeH,EAAfG,WACvBV,EAASW,YAAMH,EAAOC,EAAUC","file":"static/js/6.4e5f32ab.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { Field } from 'redux-form';\r\n\r\nimport './FormsControl.css';\r\n\r\nexport const FormControl = ({ meta: { touched, error }, children }) => {\r\n\r\n  const hasError = touched && error\r\n\r\n  return (\r\n    <div className={`form-control ${hasError && 'error'}`} >\r\n      <div>\r\n        {children}\r\n      </div>\r\n\r\n      <div>\r\n        {\r\n          hasError &&\r\n          <span>\r\n            {error}\r\n          </span>\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const Textarea = (props) => {\r\n\r\n  return <FormControl {...props}>\r\n    <textarea {...props.input} {...props} />\r\n  </FormControl>\r\n}\r\n\r\nexport const Input = (props) => {\r\n\r\n  return <FormControl {...props}>\r\n    <input {...props.input} {...props} />\r\n  </FormControl>\r\n}\r\n\r\nexport const CreateField = (placeholder, name, validators, component, type = \"\", text = '') => {\r\n  return (\r\n    <div>\r\n      <Field\r\n        name={name}\r\n        component={component}\r\n        placeholder={placeholder}\r\n        validate={validators}\r\n        type={type}\r\n      />\r\n      {text}\r\n    </div>\r\n  )\r\n}","export const required = (value) => {\r\n  if (value) return undefined\r\n\r\n  return 'Field is requered '\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n  if (value?.length > maxLength) return `Max length is ${maxLength} symbols`\r\n\r\n  return undefined\r\n}","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { reduxForm } from 'redux-form';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { Input, CreateField } from '../common/FormsControl/FormsControl';\r\n\r\nimport { required, maxLengthCreator } from '../../utils/validators';\r\nimport { login } from '../../redux/auth-reducer';\r\n\r\nimport './Login.css';\r\n\r\nconst maxLength = maxLengthCreator(30)\r\n\r\nconst LoginForm = ({ handleSubmit, error }) => {\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      {\r\n        CreateField(\"Email\", \"email\", [required, maxLength], Input, \"email\")\r\n      }\r\n\r\n      {\r\n        CreateField(\"Password\", \"password\", [required, maxLength], Input, \"password\")\r\n      }\r\n\r\n      {\r\n        CreateField(null, \"rememberMe\", [], Input, \"checkbox\", \"remember Me\")\r\n      }\r\n\r\n      {\r\n        error &&\r\n        <div className=\"login-error\">\r\n          {error}\r\n        </div>\r\n      }\r\n\r\n      <div>\r\n        <button>\r\n          Login\r\n        </button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({\r\n  form: 'login'\r\n})(LoginForm)\r\n\r\nconst Login = () => {\r\n  const dispatch = useDispatch()\r\n  const isAuth = useSelector((state) => state.auth.isAuth)\r\n\r\n  const onSubmit = (formData) => {\r\n    let { email, password, rememberMe } = formData\r\n    dispatch(login(email, password, rememberMe))\r\n  }\r\n\r\n  if (isAuth) {\r\n    return <Redirect to={\"/profile\"} />\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>\r\n        Login\r\n      </h1>\r\n\r\n      <LoginReduxForm\r\n        onSubmit={onSubmit}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Login;"],"sourceRoot":""}